{"/home/travis/build/npmtest/node-npmtest-redlock/test.js":"/* istanbul instrument in package npmtest_redlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redlock/lib.npmtest_redlock.js":"/* istanbul instrument in package npmtest_redlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_redlock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_redlock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-redlock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-redlock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_redlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_redlock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_redlock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_redlock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_redlock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_redlock.__dirname + '/lib.npmtest_redlock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-redlock/node_modules/redlock/redlock.js":"'use strict';\n\nvar util         = require('util');\nvar crypto       = require('crypto');\nvar Promise      = require('bluebird');\nvar EventEmitter = require('events');\n\n// support the event library provided by node < 0.11.0\nif(typeof EventEmitter.EventEmitter === 'function')\n\tEventEmitter = EventEmitter.EventEmitter;\n\n\n// constants\nvar lockScript = 'return redis.call(\"set\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])';\nvar unlockScript = 'if redis.call(\"get\", KEYS[1]) == ARGV[1] then return redis.call(\"del\", KEYS[1]) else return 0 end';\nvar extendScript = 'if redis.call(\"get\", KEYS[1]) == ARGV[1] then return redis.call(\"pexpire\", KEYS[1], ARGV[2]) else return 0 end';\n\n// defaults\nvar defaults = {\n\tdriftFactor: 0.01,\n\tretryCount:  3,\n\tretryDelay:  200\n};\n\n\n\n\n\n// LockError\n// ---------\n// This error is returned when there is an error locking a resource.\nfunction LockError(message) {\n\tError.call(this);\n\tError.captureStackTrace(this, LockError);\n\tthis.name = 'LockError';\n\tthis.message = message || 'Failed to lock the resource.';\n}\n\nutil.inherits(LockError, Error);\n\n\n\n\n\n\n// Lock\n// ----\n// An object of this type is returned when a resource is successfully locked. It contains\n// convenience methods `unlock` and `extend` which perform the associated Redlock method on\n// itself.\nfunction Lock(redlock, resource, value, expiration) {\n\tthis.redlock    = redlock;\n\tthis.resource   = resource;\n\tthis.value      = value;\n\tthis.expiration = expiration;\n}\n\nLock.prototype.unlock = function unlock(callback) {\n\treturn this.redlock.unlock(this, callback);\n};\n\nLock.prototype.extend = function extend(ttl, callback) {\n\treturn this.redlock.extend(this, ttl, callback);\n};\n\n// Attach a reference to Lock, which allows the application to use instanceof\n// to ensure type.\nRedlock.Lock = Lock;\n\n\n\n\n\n// Redlock\n// -------\n// A redlock object is instantiated with an array of at least one redis client and an optional\n// `options` object. Properties of the Redlock object should NOT be changed after it is first\n// used, as doing so could have unintended consequences for live locks.\nfunction Redlock(clients, options) {\n\t// set default options\n\toptions = options || {};\n\tthis.driftFactor = typeof options.driftFactor === 'number' ? options.driftFactor : defaults.driftFactor;\n\tthis.retryCount  = typeof options.retryCount  === 'number' ? options.retryCount  : defaults.retryCount;\n\tthis.retryDelay  = typeof options.retryDelay  === 'number' ? options.retryDelay  : defaults.retryDelay;\n\tthis.lockScript  = typeof options.lockScript  === 'function' ? options.lockScript(lockScript) : lockScript;\n\tthis.unlockScript = typeof options.unlockScript  === 'function' ? options.unlockScript(unlockScript) : unlockScript;\n\tthis.extendScript = typeof options.extendScript  === 'function' ? options.extendScript(extendScript) : extendScript;\n\n\t// set the redis servers from additional arguments\n\tthis.servers = clients;\n\tif(this.servers.length === 0)\n\t\tthrow new Error('Redlock must be instantiated with at least one redis server.');\n}\n\n// Inherit all the EventEmitter methods, like `on`, and `off`\nutil.inherits(Redlock, EventEmitter);\n\n\n// Attach a reference to LockError per issue #7, which allows the application to use instanceof\n// to destinguish between error types.\nRedlock.LockError = LockError;\n\n\n// lock\n// ----\n// This method locks a resource using the redlock algorithm.\n//\n// ```js\n// redlock.lock(\n//   'some-resource',       // the resource to lock\n//   2000,                  // ttl in ms\n//   function(err, lock) {  // callback function (optional)\n//     ...\n//   }\n// )\n// ```\nRedlock.prototype.acquire =\nRedlock.prototype.lock = function lock(resource, ttl, callback) {\n\treturn this._lock(resource, null, ttl, callback);\n};\n\n// lock\n// ----\n// This method locks a resource using the redlock algorithm,\n// and returns a bluebird disposer.\n//\n// ```js\n// using(\n//   redlock.disposer(\n//     'some-resource',       // the resource to lock\n//     2000                   // ttl in ms\n//   ),\n//   function(lock) {\n//     ...\n//   }\n// );\n// ```\nRedlock.prototype.disposer = function disposer(resource, ttl, errorHandler) {\n\terrorHandler = errorHandler || function(err) {};\n\treturn this._lock(resource, null, ttl).disposer(function(lock){\n\t\treturn lock.unlock().catch(errorHandler);\n\t});\n};\n\n\n// unlock\n// ------\n// This method unlocks the provided lock from all servers still persisting it. It will fail\n// with an error if it is unable to release the lock on a quorum of nodes, but will make no\n// attempt to restore the lock on nodes that failed to release. It is safe to re-attempt an\n// unlock or to ignore the error, as the lock will automatically expire after its timeout.\nRedlock.prototype.release =\nRedlock.prototype.unlock = function unlock(lock, callback) {\n\tvar self = this;\n\treturn new Promise(function(resolve, reject) {\n\n\t\t// immediately invalidate the lock\n\t\tlock.expiration = 0;\n\n\t\t// the number of servers which have agreed to release this lock\n\t\tvar votes = 0;\n\n\t\t// the number of votes needed for consensus\n\t\tvar quorum = Math.floor(self.servers.length / 2) + 1;\n\n\t\t// the number of async redis calls still waiting to finish\n\t\tvar waiting = self.servers.length;\n\n\t\t// release the lock on each server\n\t\tself.servers.forEach(function(server){\n\t\t\tserver.eval(self.unlockScript, 1, lock.resource, lock.value, loop);\n\t\t});\n\n\t\tfunction loop(err, response) {\n\t\t\tif(err) self.emit('clientError', err);\n\n\t\t\t// - if the lock was released by this call, it will return 1\n\t\t\t// - if the lock has already been released, it will return 0\n\t\t\t//    - it may have been re-acquired by another process\n\t\t\t//    - it may hava already been manually released\n\t\t\t//    - it may have expired\n\t\t\tif(typeof response === 'number' && (response === 0 || response === 1))\n\t\t\t\tvotes++;\n\n\t\t\tif(waiting-- > 1) return;\n\n\t\t\t// SUCCESS: there is concensus and the lock is released\n\t\t\tif(votes >= quorum)\n\t\t\t\treturn resolve();\n\n\t\t\t// FAILURE: the lock could not be released\n\t\t\treturn reject(new LockError('Unable to fully release the lock on resource \"' + lock.resource + '\".'));\n\t\t}\n\t})\n\n\t// optionally run callback\n\t.nodeify(callback);\n};\n\n\n// extend\n// ------\n// This method extends a valid lock by the provided `ttl`.\nRedlock.prototype.extend = function extend(lock, ttl, callback) {\n\tvar self = this;\n\n\t// the lock has expired\n\tif(lock.expiration < Date.now())\n\t\treturn Promise.reject(new LockError('Cannot extend lock on resource \"' + lock.resource + '\" because the lock has already expired.')).nodeify(callback);\n\n\t// extend the lock\n\treturn self._lock(lock.resource, lock.value, ttl)\n\n\t// modify and return the original lock object\n\t.then(function(extension){\n\t\tlock.value      = extension.value;\n\t\tlock.expiration = extension.expiration;\n\t\treturn lock;\n\t})\n\n\t// optionally run callback\n\t.nodeify(callback);\n};\n\n\n// _lock\n// -----\n// This method locks a resource using the redlock algorithm.\n//\n// ###Creating New Locks:\n//\n// ```js\n// redlock._lock(\n//   'some-resource',       // the resource to lock\n//   null,                  // no original lock value\n//   2000,                  // ttl in ms\n//   function(err, lock) {  // callback function (optional)\n//     ...\n//   }\n// )\n// ```\n//\n// ###Extending Existing Locks:\n//\n// ```js\n// redlock._lock(\n//   'some-resource',       // the resource to lock\n//   'dkkk18g4gy39dx6r',    // the value of the original lock\n//   2000,                  // ttl in ms\n//   function(err, lock) {  // callback function (optional)\n//     ...\n//   }\n// )\n// ```\nRedlock.prototype._lock = function _lock(resource, value, ttl, callback) {\n\tvar self = this;\n\treturn new Promise(function(resolve, reject) {\n\t\tvar request;\n\n\t\t// the number of times we have attempted this lock\n\t\tvar attempts = 0;\n\n\n\t\t// create a new lock\n\t\tif(value === null) {\n\t\t\tvalue = self._random();\n\t\t\trequest = function(server, loop){\n\t\t\t\treturn server.eval(self.lockScript, 1, resource, value, ttl, loop);\n\t\t\t};\n\t\t}\n\n\t\t// extend an existing lock\n\t\telse {\n\t\t\trequest = function(server, loop){\n\t\t\t\treturn server.eval(self.extendScript, 1, resource, value, ttl, loop);\n\t\t\t};\n\t\t}\n\n\t\tfunction attempt(){\n\t\t\tattempts++;\n\n\t\t\t// the time when this attempt started\n\t\t\tvar start = Date.now();\n\n\t\t\t// the number of servers which have agreed to this lock\n\t\t\tvar votes = 0;\n\n\t\t\t// the number of votes needed for consensus\n\t\t\tvar quorum = Math.floor(self.servers.length / 2) + 1;\n\n\t\t\t// the number of async redis calls still waiting to finish\n\t\t\tvar waiting = self.servers.length;\n\n\t\t\tfunction loop(err, response) {\n\t\t\t\tif(err) self.emit('clientError', err);\n\t\t\t\tif(response) votes++;\n\t\t\t\tif(waiting-- > 1) return;\n\n\t\t\t\t// Add 2 milliseconds to the drift to account for Redis expires precision, which is 1 ms,\n\t\t\t\t// plus the configured allowable drift factor\n\t\t\t\tvar drift = Math.round(self.driftFactor * ttl) + 2;\n\t\t\t\tvar lock = new Lock(self, resource, value, start + ttl - drift);\n\n\t\t\t\t// SUCCESS: there is concensus and the lock is not expired\n\t\t\t\tif(votes >= quorum && lock.expiration > Date.now())\n\t\t\t\t\treturn resolve(lock);\n\n\n\t\t\t\t// remove this lock from servers that voted for it\n\t\t\t\treturn lock.unlock(function(){\n\n\t\t\t\t\t// RETRY\n\t\t\t\t\tif(attempts <= self.retryCount)\n\t\t\t\t\t\treturn setTimeout(attempt, self.retryDelay);\n\n\t\t\t\t\t// FAILED\n\t\t\t\t\treturn reject(new LockError('Exceeded ' + self.retryCount + ' attempts to lock the resource \"' + resource + '\".'));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn self.servers.forEach(function(server){\n\t\t\t\treturn request(server, loop);\n\t\t\t});\n\t\t}\n\n\t\treturn attempt();\n\t})\n\n\t// optionally run callback\n\t.nodeify(callback);\n};\n\n\nRedlock.prototype._random = function _random(){\n\treturn crypto.randomBytes(16).toString('hex');\n};\n\n\nmodule.exports = Redlock;\n"}